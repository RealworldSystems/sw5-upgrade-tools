#% text_encoding = iso8859_1
##
## File            : method_compare_result.magik
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworldwide.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614319
##                   fax     : +31(0)345 614406
##
## Contains        : 
##
##
## Date written    : Mar/2009
## Date changed    : Mar/2009
##
## `Source contents (Starts with evt. Shared Cons/vars, Automatically maintained):'
##
## '|Class Defs|:`
##                  method_compare_result
## '|Methods (Public)|:`
##                  method_compare_result.new()
##                  method_compare_result.different?
##                  method_compare_result.show_on()
##                  method_compare_result.print_on()
## '|Methods (Private)|:`
##                  method_compare_result.init()
## `Source Code'
#&&
#
_package roos_image_compare
$

#remex(:method_compare_result)

_pragma(classify_level=restricted, topic={roos,roos_image_compare})
# Author         : Realworld Systems (FvH); Date: Mar/2009
## Class Purpose : Holder of the differences between two exemplars
## Revision      : 
def_slotted_exemplar(:method_compare_result,
		     {
			     {:method_exemplar,_unset,:writable},
			     {:method, _unset, :writable},
			     {:proc_or_value_different?, _unset, :writable},
			     {:my_source_file, _unset, :writable},
			     {:slave_source_file, _unset, :writable},
			     {:me_missing?, _unset, :writable},
			     {:slave_missing?, _unset, :writable},			     
			     {:me_private?, _unset, :writable},
			     {:slave_private?, _unset, :writable},
			     {:me_abstract?, _unset, :writable},
			     {:slave_abstract?, _unset, :writable},
			     {:me_iter?, _unset, :writable},
			     {:slave_iter?, _unset, :writable},
			     {:me_shared_constant?, _unset, :writable},
			     {:slave_shared_constant?, _unset, :writable},
			     {:me_shared_variable?, _unset, :writable},
			     {:slave_shared_variable?, _unset, :writable}
		     })
$

_pragma(classify_level=restricted, topic={roos,roos_image_compare})
_method method_compare_result.new(p_method_name)
	# Author         : Realworld Systems (FvH); Date: Mar/2009
	## Parameters    : -
	## Returns       : -
	## Function      : Return a new result object.
	## Revision      : 
	_return _clone.init(p_method_name)
_endmethod
$

_pragma(classify_level=restricted, topic={roos,roos_image_compare})
_private _method method_compare_result.init(p_method_name)
	# Author         : Realworld Systems (FvH); Date: Mar/2009
	## Parameters    : P_EXEMPLAR
	## Returns       : self
	## Function      : Initialise slots.
	## Revision      : 
	.method << p_method_name
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={roos,roos_image_compare})
_method method_compare_result.different?
	# Author         : Realworld Systems (FvH); Date: Mar/2009
	## Parameters    : 
	## Returns       : boolean
	## Function      : Answer if there are any differences
	## Revision      :

	_if .proc_or_value_different? _is _true _then _return _true _endif	
	_if .me_private? _isnt .slave_private? _then _return _true _endif
	_if .me_abstract? _isnt .slave_abstract? _then _return _true _endif
	_if .me_iter? _isnt .slave_iter? _then _return _true _endif
	_if .me_shared_constant? _isnt .slave_shared_constant? _then _return _true _endif
	_if .me_shared_variable? _isnt .slave_shared_variable? _then _return _true _endif
	
	_return _false
_endmethod
$

_pragma(classify_level=restricted, topic={roos,roos_image_compare})
_method method_compare_result.show_on(p_stream)
	# Author         : Realworld Systems (FvH); Date: Mar/2009
	## Parameters    : P_STREAM
	## Returns       : 
	## Function      : write info of self to the stream
	## Revision      : 
	_if .method_exemplar _isnt _unset
	_then
		p_stream.write(_self.class_name, " (")
		.method_exemplar.show_on(p_stream)
		p_stream.write(")")
	_else
		_super.show_on(p_stream)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={roos,roos_image_compare})
_method method_compare_result.print_on(p_stream)
	# Author         : Realworld Systems (FvH); Date: Mar/2009
	## Parameters    : P_STREAM: 
	## Returns       : 
	## Function      : print self on a stream.
	## Revision      : 
	
	p_stream.write("Exemplar: ", .method_exemplar)
	p_stream.newline()
	p_stream.write("Method name: ", .method)
	p_stream.newline()
	p_stream.write("Missing in Master?: ", .me_missing?)
	p_stream.newline()
	p_stream.write("Masters' source file: ", .my_source_file)
	p_stream.newline()
	p_stream.write("Missing in Slave?: ", .slave_missing?	)
	p_stream.newline()
	p_stream.write("Slave's source file: ", .slave_source_file)
	p_stream.newline()	
	p_stream.write("Different proc or value?: ", .proc_or_value_different?)
	p_stream.newline()	
	p_stream.write("Private in master?: ", .me_private?)
	p_stream.newline()
	p_stream.write("Private in slave?: ", .slave_private?)
	p_stream.newline()
	p_stream.write("Abstract in master?: ", .me_abstract?)
	p_stream.newline()
	p_stream.write("Abstract in slave?: ", .slave_abstract?)
	p_stream.newline()
	p_stream.write("Iter in master?: ", .me_iter?)
	p_stream.newline()
	p_stream.write("Iter in slave: ", .slave_iter?)
	p_stream.newline()
	p_stream.write("Shared constant in master?: ", .me_shared_constant?)
	p_stream.newline()
	p_stream.write("Shared constant in slave?: ", .slave_shared_constant?)
	p_stream.newline()
	p_stream.write("Shared variable in Master?: ", .me_shared_variable?)
	p_stream.newline()
	p_stream.write("Shared variable in slave?: ", .slave_shared_variable?)
	p_stream.newline()
_endmethod
$

