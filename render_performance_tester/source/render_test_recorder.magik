_package user
$

#remex(:render_test_recorder)
$

_pragma(classify_level=basic, topic={performance})
def_slotted_exemplar(:render_test_recorder,
	{
		{:out,      _unset},
		{:map_view, _unset}
	})
$


_pragma(classify_level=basic, topic={performance})
_method render_test_recorder.new()
	_return _clone.init()
_endmethod
$

_pragma(classify_level=basic, topic={performance})
_private _method render_test_recorder.init()
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={performance})
_method render_test_recorder.start_recording(filename)
	_local ok? << _false 
	_protect
		_self.attach_to_maps()
		_self.open_output_stream(filename)
		ok? << _true 
	_protection
		_if _not ok?
		_then 
			_self.stop_recording()
		_endif 
	_endprotect
_endmethod
$

_pragma(classify_level=basic, topic={performance})
_method render_test_recorder.stop_recording()
	_self.detach_from_maps()
	_self.close_output_stream()
_endmethod
$

_pragma(classify_level=basic, topic={performance})
_private _method render_test_recorder.attach_to_maps()
	_if smallworld_product.applications.size <> 1
	_then
		condition.raise(:error, :string, "There should be exactly one application open")
	_endif
	_local app << smallworld_product.applications.an_element()
	_local c << 0
	_for i_view _over app.plugin(:maps).active_map_views()
	_loop
		c+<< 1
	_endloop
	_if c <> 1
	_then
		condition.raise(:error, :string, "There should be one active map open to get a fair comparison, there are " + c.write_string)
	_endif
	.map_view << app.plugin(:maps).current_map_view
	.map_view.add_dependent(_self)
_endmethod
$

_pragma(classify_level=basic, topic={performance})
_private _method render_test_recorder.detach_from_maps()
	_if .map_view _isnt _unset 
	_then
		.map_view.remove_dependent(_self)
		.map_view << _unset 
	_endif 
_endmethod
$

_pragma(classify_level=basic, topic={performance})
_private _method render_test_recorder.open_output_stream(filename)
	.out << external_text_output_stream.new(filename)
_endmethod
$

_pragma(classify_level=basic, topic={performance})
_private _method render_test_recorder.close_output_stream()
	_if .out _isnt _unset
	_then 
		.out.close()
		.out << _unset
	_endif 
_endmethod
$


_pragma(classify_level=basic, topic={performance})
_method render_test_recorder.note_change(who, what, _optional extra)
	_if who _is .map_view _andif
	    what _is :post_render
	_then
		_self.process_post_render(who, extra)
	_endif
_endmethod
$

_pragma(classify_level=basic, topic={performance})
_private _method render_test_recorder.process_post_render(map_view, extra)
	_if extra <> :complete
	_then
		write("Ignoring incomplete render")
	_else
		_local b << map_view.current_view_bounds
		.out.write(b.xmin.rounded,
			   tab_char,
			   b.xmax.rounded,
			   tab_char,
			   b.ymin.rounded,
			   tab_char,
			   b.ymax.rounded)
		.out.newline()
	_endif 
_endmethod
$
